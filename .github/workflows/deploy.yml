name: Build, Deploy, and Clean SAM Application with ECR

on:
  push:
    branches:
      - main

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: yggdrasil-images
  KEEP_LAST_N_IMAGES: 5

jobs:
  build-deploy-clean:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-node@v3

      - uses: aws-actions/setup-sam@v2

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if it doesn't exist and set lifecycle policy
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}
          aws ecr put-lifecycle-policy --repository-name ${ECR_REPOSITORY} --lifecycle-policy-text '{
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 30 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }'

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build with SAM
        run: sam build --use-container

      - name: Install npm modules
        run: npm install

      - name: Run tests
        run: yarn test

      - name: Deploy with SAM
        run: |
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --stack-name yggdrasil \
            --s3-bucket yggdrasilbuild \
            --capabilities CAPABILITY_IAM \
            --region ${{ secrets.AWS_REGION }} \
            --image-repository $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Clean up old ECR images
        run: |
          IMAGES_TO_DELETE=$(aws ecr list-images --repository-name ${ECR_REPOSITORY} --query 'imageIds[?type(imageTag)!=`string`].[imageDigest]' --output text)
          if [ ! -z "$IMAGES_TO_DELETE" ]; then
            echo "Deleting untagged images: $IMAGES_TO_DELETE"
            aws ecr batch-delete-image --repository-name ${ECR_REPOSITORY} --image-ids "$IMAGES_TO_DELETE"
          fi

          IMAGES_TO_KEEP=$(aws ecr list-images --repository-name ${ECR_REPOSITORY} --query 'reverse(sort_by(imageDetails,& imagePushedAt))[:${KEEP_LAST_N_IMAGES}].imageDigest' --output text)
          ALL_IMAGES=$(aws ecr list-images --repository-name ${ECR_REPOSITORY} --query 'imageDetails[].imageDigest' --output text)

          for digest in $ALL_IMAGES; do
            if [[ ! $IMAGES_TO_KEEP =~ $digest ]]; then
              echo "Deleting old image: $digest"
              aws ecr batch-delete-image --repository-name ${ECR_REPOSITORY} --image-ids imageDigest=$digest
            fi
          done
